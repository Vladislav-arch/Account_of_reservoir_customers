from datetime import date, timedelta, datetime

from aiogram import Router, F, Bot, types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import StateFilter
from contextlib import suppress
import asyncio
from data.db.table.static_information import insert_into_static_information

#utils
from ClientPart.utils.UserStorage import UserStorage
from ClientPart.utils.States import RegistrationClient, ReserveSeat
from utils.number_verification import number_verification
from ClientPart.utils.checking_reserved_seats import checking_reserved_seats

#keyboards
from ClientPart.keyboards import builders
from ClientPart.keyboards import reply

#data
from ClientPart.data.get_user import get_user

import phonenumbers

router = Router()


@router.callback_query(StateFilter(ReserveSeat.place, ReserveSeat.day, ReserveSeat.time), F.data.in_(["–í–∏–π—Ç–∏", ]))
async def reserve(callback: CallbackQuery, state: FSMContext, users: UserStorage, bot: Bot):
    user = users.users_list[callback.from_user.id]

    if callback.data == "–í–∏–π—Ç–∏":
        with suppress(TelegramBadRequest):
            for u in user.mess_id_for_clean:
                await bot.delete_message(callback.message.chat.id, u)
            user.mess_id_for_clean = []
        await callback.message.answer("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ!", reply_markup=reply.main)
        await state.clear()


@router.callback_query(ReserveSeat.place, F.data.in_(["–ú—ñ—Å—Ü–µ 1", "–ú—ñ—Å—Ü–µ 2", "–ú—ñ—Å—Ü–µ 3", "–ú—ñ—Å—Ü–µ 4", "–ú—ñ—Å—Ü–µ 5"]))
async def reserve(callback: CallbackQuery, state: FSMContext, users: UserStorage, bot: Bot):
    user = users.users_list[callback.from_user.id]
    await state.update_data(place=callback.data)

    try:
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=user.temp_mess_id)
    except TelegramBadRequest as e:
        print(e)

    photo = FSInputFile(f"photos/{callback.data}.jpg")

    if callback.data == "–ú—ñ—Å—Ü–µ 1":
        user.text = (
            "<pre>–ú—ñ—Å—Ü–µ 1 –º–∞—î –≥–ª–∏–±–æ–∫–∏–π –±–µ—Ä–µ–≥, —ñ —Ç–æ–º—É –≤–æ–Ω–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –ª–æ–≤–ª—ñ –Ω–∞ –ø–æ–ø–ª–∞–≤–æ–∫. –û–¥–Ω–∞–∫ –¥–ª—è –¥–∞–ª—å–Ω—å–æ–≥–æ –∑–∞–±—Ä–æ—Å—É "
            "—Ü–µ –º—ñ—Å—Ü–µ –Ω–µ –Ω–∞–π–∫—Ä–∞—â–µ, –æ—Å–∫—ñ–ª—å–∫–∏ —Ç—É—Ç –±–∞–≥–∞—Ç–æ –∫—É—â—ñ–≤. üé£</pre>"
            "<pre>–Ø–∫—â–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ, –æ–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É, –Ω–∞ —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏. –ù–∏–∂—á–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è "
            "–ª–∏—à–µ –≤—ñ–ª—å–Ω—ñ –¥–∞—Ç–∏. üìÖ</pre>\n")
    elif callback.data == "–ú—ñ—Å—Ü–µ 2":
        user.text = (
            "<pre>–¶–µ –º—ñ—Å—Ü–µ —ñ–¥–µ–∞–ª—å–Ω–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –ª–æ–≤–ª—ñ –Ω–∞ –ø–æ–ø–ª–∞–≤–æ–∫, –æ—Å–∫—ñ–ª—å–∫–∏ –º–∞—î –≥–ª–∏–±–æ–∫–∏–π –±–µ—Ä–µ–≥. –î–ª—è –¥–∞–ª—å–Ω—å–æ–≥–æ –∑–∞–±—Ä–æ—Å—É "
            "–π–æ–≥–æ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏, –∞–ª–µ –Ω–µ –±–∞–∂–∞–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ —Ç—É—Ç –±–∞–≥–∞—Ç–æ –∫—É—â—ñ–≤. üé£</pre>"
            "<pre>–Ø–∫—â–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ, –æ–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É, –Ω–∞ —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏. –ù–∏–∂—á–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è "
            "–ª–∏—à–µ –≤—ñ–ª—å–Ω—ñ –¥–∞—Ç–∏. üìÖ</pre>\n")
    elif callback.data == "–ú—ñ—Å—Ü–µ 3":
        user.text = (
            "<pre>–¶–µ –º—ñ—Å—Ü–µ —ñ–¥–µ–∞–ª—å–Ω–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –ª–æ–≤–ª—ñ –Ω–∞ –ø–æ–ø–ª–∞–≤–æ–∫, –æ—Å–∫—ñ–ª—å–∫–∏ –º–∞—î –≥–ª–∏–±–æ–∫–∏–π –±–µ—Ä–µ–≥. –î–ª—è –¥–∞–ª—å–Ω—å–æ–≥–æ –∑–∞–±—Ä–æ—Å—É "
            "–π–æ–≥–æ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏, –∞–ª–µ –Ω–µ –±–∞–∂–∞–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ —Ç—É—Ç –±–∞–≥–∞—Ç–æ –∫—É—â—ñ–≤. üé£</pre>"
            "<pre>–Ø–∫—â–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ, –æ–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É, –Ω–∞ —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏. –ù–∏–∂—á–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è "
            "–ª–∏—à–µ –≤—ñ–ª—å–Ω—ñ –¥–∞—Ç–∏. üìÖ</pre>\n")
    elif callback.data == "–ú—ñ—Å—Ü–µ 4":
        user.text = (
            "<pre>–¶–µ –º—ñ—Å—Ü–µ —î –Ω–∞–π—É–ª—é–±–ª–µ–Ω—ñ—à–∏–º —Å–µ—Ä–µ–¥ –ª—é–¥–µ–π, —è–∫—ñ –ª—é–±–ª—è—Ç—å –ª–æ–≤–∏—Ç–∏ –Ω–∞ –¥–∞–ª—å–Ω—ñ–π –∑–∞–±—Ä–æ—Å, –æ—Å–∫—ñ–ª—å–∫–∏ —Ç—É—Ç —á–∏—Å—Ç–µ –¥–Ω–æ."
            " –í–æ–Ω–æ —Ç–∞–∫–æ–∂ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –ª–æ–≤–ª—ñ –Ω–∞ –ø–æ–ø–ª–∞–≤–æ–∫, –∞–ª–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ —ñ–Ω—à–∏–º–∏ –º—ñ—Å—Ü—è–º–∏ –º–∞—î –º—ñ–ª–∫–µ –¥–Ω–æ. üé£üåä</pre>"
            "<pre>–Ø–∫—â–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ, –æ–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É, –Ω–∞ —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏. –ù–∏–∂—á–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è "
            "–ª–∏—à–µ –≤—ñ–ª—å–Ω—ñ –¥–∞—Ç–∏. üìÖ</pre>\n")
    elif callback.data == "–ú—ñ—Å—Ü–µ 5":
        user.text = (
            "<pre>–ú—ñ—Å—Ü–µ —Å—Ö–æ–∂–µ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º –∑ –º—ñ—Ü–µ–º 4. –¢—É—Ç –º–æ–∂–Ω–∞ —Ä–∏–±–∞–ª–∏—Ç–∏ —è–∫ –Ω–∞ –ø–æ–ø–ª–∞–≤–æ–∫, —Ç–∞–∫ —ñ –Ω–∞ –¥–∞–ª—å–Ω—ñ–π –∑–∞–±—Ä–æ—Å. üé£üåä</pre>"
            "<pre>–Ø–∫—â–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ, –æ–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É, –Ω–∞ —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏. –ù–∏–∂—á–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è "
            "–ª–∏—à–µ –≤—ñ–ª—å–Ω—ñ –¥–∞—Ç–∏. üìÖ</pre>\n")

    day = [f"{date.today()}", f"{date.today() + timedelta(days=1)}",
     f"{date.today() + timedelta(days=2)}",
     f"{date.today() + timedelta(days=3)}",
     f"{date.today() + timedelta(days=4)}",
     f"{date.today() + timedelta(days=5)}",
     f"{date.today() + timedelta(days=6)}", "–í–∏–π—Ç–∏"]
    free_days = []

    for d in day:
        if await checking_reserved_seats(callback.data, d):
            continue
        free_days.append(d)

    sent_mess = await callback.message.answer_photo(photo=photo, caption=user.text,
                                                    reply_markup=builders.day(free_days))
    user.temp_mess_id = sent_mess.message_id
    user.mess_id_for_clean.append(sent_mess.message_id)

    await callback.answer()


@router.callback_query(
    F.data.in_([f"{date.today()}", f"{date.today() + timedelta(days=1)}", f"{date.today() + timedelta(days=2)}",
                f"{date.today() + timedelta(days=3)}", f"{date.today() + timedelta(days=4)}",
                f"{date.today() + timedelta(days=5)}",
                f"{date.today() + timedelta(days=6)}"]))
async def reserve(callback: CallbackQuery, state: FSMContext, users: UserStorage, bot: Bot):
    user = users.users_list[callback.from_user.id]
    await state.update_data(day=callback.data)

    mess = await bot.edit_message_caption(chat_id=callback.message.chat.id,
                                          message_id=user.temp_mess_id,
                                          caption=user.text + f"\n–í–≤–µ–¥—ñ—Ç—å —á–∞—Å –Ω–∞ —è–∫–∏–π –±–∞–∂–∞—î—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ: {user.time}",
                                          reply_markup=builders.num_kb())
    user.mess_id_for_clean.append(mess.message_id)

    await state.set_state(ReserveSeat.time)


@router.callback_query(ReserveSeat.time)
async def reserve(callback: CallbackQuery, state: FSMContext, users: UserStorage, bot: Bot):
    user = users.users_list[callback.from_user.id]

    if len(user.time) <= 4 and callback.data.isdigit():
        if len(user.time) == 2:
            user.time += ":"
        user.time += callback.data
    if callback.data == "‚ùå":
        if len(user.time) == 4:
            user.time = user.time[:-1]
        user.time = user.time[:-1]
    if callback.data == "OK":
        data = await state.get_data()
        specified_date_str = f"{data['day']} {user.time}"
        current_date = datetime.now()
        try:
            specified_date = datetime.strptime(specified_date_str, '%Y-%m-%d %H:%M')
            if current_date > specified_date:
                await callback.answer("–í–∫–∞–∑–∞–Ω–∏–π —á–∞—Å –≤–∂–µ –º–∏–Ω—É–≤üò†")
                return
            datetime.strptime(user.time, '%H:%M')
        except ValueError:
            await callback.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∞—Å!üò†")
            return

        await state.update_data(start_time=user.time)
        data = await get_user(callback.from_user.id)
        if data:
            await bot.edit_message_caption(chat_id=callback.message.chat.id,
                                           message_id=user.temp_mess_id,
                                           caption=user.text +
                                                   f"–ó–∞–ª–∏—à–∏—Ç–∏ —Ü—ñ –¥–∞–Ω—ñ?ü§î"
                                                   f"<pre>–Ü–º`—è: {data[1]}</pre><pre>–¢–µ–ª–µ—Ñ–æ–Ω: {data[2]}</pre>",
                                           reply_markup=builders.profile_inline(["–¢–∞–∫", "–ù—ñ. –Ø –Ω–∞–¥–∞–º —ñ–Ω—à—ñ –¥–∞–Ω—ñ"]))
            await state.set_state(ReserveSeat.choice)
        else:
            await callback.message.answer("–ù–∞–¥–∞–π—Ç–µ —Å–≤–æ—î —ñ–º`—è",
                                          reply_markup=builders.profile11(
                                              [f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —ñ–º`—è: {callback.from_user.first_name}", "–í–∏–π—Ç–∏"]))
            await state.set_state(ReserveSeat.name)

        return

    with suppress(TelegramBadRequest):
        mess = await bot.edit_message_caption(chat_id=callback.message.chat.id,
                                              message_id=user.temp_mess_id,
                                              caption=user.text + f"\n–í–≤–µ–¥—ñ—Ç—å —á–∞—Å –Ω–∞ —è–∫–∏–π –±–∞–∂–∞—î—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ: <b>{user.time}</b>",
                                              reply_markup=builders.num_kb())
        user.mess_id_for_clean.append(mess.message_id)
    await callback.answer()


@router.callback_query(ReserveSeat.choice)
async def reserve(callback: CallbackQuery, state: FSMContext, users: UserStorage, bot: Bot):
    user = users.users_list[callback.from_user.id]

    if callback.data == "–¢–∞–∫":
        data = await get_user(callback.from_user.id)
        await state.update_data(user_phone=data[2], name=data[1])
        await callback.message.answer("–ù–∞–¥–∞–π—Ç–µ –ø–µ—Ä–µ–¥–ø–ª–∞—Ç—É –∑–∞ –º—ñ—Å—Ü–µüí∏", reply_markup=builders.profile("–í–∏–π—Ç–∏"))
        mess = await bot.send_invoice(callback.message.chat.id,
                                      title="–ü–µ—Ä–µ–¥–ø–ª–∞—Ç—É –∑–∞ –º—ñ—Å—Ü–µ",
                                      description="–ú—ñ—Å—Ü–µ 1",
                                      provider_token="410694247:TEST:78a56796-75c8-433e-b614-5b09b365e44e",
                                      currency="UAH",
                                      photo_url="https://tech.24tv.ua/resources/photos/news/202206/2041219.jpg?v=1661253043000&q=100",
                                      photo_width=416,
                                      photo_height=234,
                                      photo_size=416,
                                      is_flexible=False,
                                      prices=[types.LabeledPrice(label="–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –∑–∞ –º—ñ—Å—Ü–µ", amount=100 * 100)],
                                      start_parameter="fdsffddsf",
                                      payload="test-invoice-pyload"
                                      )
        user.mess_id_for_clean.append(mess.message_id)
        await state.set_state(ReserveSeat.pay)
    elif callback.data == "–ù—ñ. –Ø –Ω–∞–¥–∞–º —ñ–Ω—à—ñ –¥–∞–Ω—ñ":
        await callback.message.answer("–ù–∞–¥–∞–π—Ç–µ —Å–≤–æ—î —ñ–º`—è",
                                      reply_markup=builders.profile11(
                                          [f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —ñ–º`—è: {callback.from_user.first_name}", "–í–∏–π—Ç–∏"]))
        await state.set_state(ReserveSeat.name)


@router.callback_query(F.data.in_(["–í–ø–µ–≤–Ω–µ–Ω–∏–π", "–ù–µ –±—É–¥—É –±—Ä–æ–Ω—é–≤–∞—Ç–∏"]))
async def reserve(callback: CallbackQuery, state: FSMContext, users: UserStorage, bot: Bot):
    user = users.users_list[callback.from_user.id]

    if callback.data == "–í–ø–µ–≤–Ω–µ–Ω–∏–π":
        mess = await callback.message.answer(".", reply_markup=reply.rmk)
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=mess.message_id)
        await callback.message.answer("–î–æ–±—Ä–µ! –Ø–∫–µ –≤–∏ –±–∞–∂–∞—î—Ç–µ –æ–±—Ä–∞—Ç–∏ –º—ñ—Å—Ü–µ –¥–ª—è —Ä–∏–±–æ–ª–æ–≤–ª—ñ?ü§î",
                                      reply_markup=builders.places(
                                          ["–ú—ñ—Å—Ü–µ 1", "–ú—ñ—Å—Ü–µ 2", "–ú—ñ—Å—Ü–µ 3", "–ú—ñ—Å—Ü–µ 4", "–ú—ñ—Å—Ü–µ 5", "–í–∏–π—Ç–∏"]))
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)
        await state.set_state(ReserveSeat.place)
    elif callback.data == "–ù–µ –±—É–¥—É –±—Ä–æ–Ω—é–≤–∞—Ç–∏":
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)
        await callback.message.answer("–í–∞—Å –∑—Ä–æ–∑—É–º—ñ–≤!")
        await state.clear()
